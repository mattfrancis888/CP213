package fran0880_a03;

/**
 * A simple linked deque structure of <code>T</code> objects. Only the
 * <code>T</code> value contained in the deque is visible through the standard
 * deque methods. Extends the <code>DoubleLink</code> class, which already
 * defines the front node, rear node, length, isEmpty, and iterator.
 *
 * @author - your name here -
 * @author David Brown
 * @version 2019-01-26
 *
 * @param <T>
 *            this data structure value type.
 */
public class DoubleDeque<T> extends DoubleLink<T> {

    /**
     * Adds a value to the front of a deque.
     *
     * @param value
     *            value to add to the front of the deque.
     */
	
	 //First node
    private DoubleNode<T> rear = null;
    public void addFront(final T value) {
	// your code here
    	this.front =  new DoubleNode<T>(value, null, this.front);
    }

    /**
     * Adds a value to the rear of a deque.
     *
     * @param value
     *            value to add to the rear of the deque.
     */
    public void addRear(final T value) {
	// your code here
    	this.rear =  new DoubleNode<T>(value, this.rear, null);
    }

    /**
     * Returns the value at the front of a deque.
     *
     * @return the value at the front of the deque.
     */
    public T peekFront() {
	// your code here
    	return this.front;
    }

    /**
     * Returns the value at the rear of a deque.
     *
     * @return the value at the rear of the deque.
     */
    public T peekRear() {
	// your code here
    	return this.rear;
    }

    /**
     * Removes and returns the value at the front of a deque.
     *
     * @return the value that has been removed.
     */
    public T removeFront() {
	// your code here
    }

    /**
     * Removes and returns the value at the rear of a deque.
     *
     * @return the value that has been removed.
     */
    public T removeRear() {
	// your code here
    }
}
