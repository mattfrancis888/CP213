package fran0880_a03;


/**
 * A simple linked queue structure of <code>T</code> objects. Only the
 * <code>T</code> value contained in the queue is visible through the standard
 * queue methods. Extends the <code>DoubleLink</code> class, which already
 * defines the front node, rear node, length, isEmpty, and iterator.
 *
 * @author - your name here -
 * @author David Brown
 * @version 2019-01-26
 *
 * @param <T>
 *            this data structure value type.
 */
public class DoubleQueue<T> extends DoubleLink<T> {

    /**
     * Combines the contents of the left and right Queues into the current
     * Queue. Moves nodes only - does not move value or call the high-level
     * methods insert or remove. left and right Queues are empty when done.
     * Nodes are moved alternately from left and right to this Queue.
     *
     * @param source1
     *            The front Queue to extract nodes from.
     * @param source2
     *            The second Queue to extract nodes from.
     */
    public void combine(final DoubleQueue<T> source1,
	    final DoubleQueue<T> source2) {
	// your code here
    }

    /**
     * Adds value to the rear of the queue. Increments the queue size.
     *
     * @param value
     *            The value to added to the rear of the queue.
     */
    public void insert(final T value) {
	// your code here
    	this.rear =  new DoubleNode<T>(value, this.rear, this.rear);
    }

    /**
     * Returns the front value of the queue and removes that value from the
     * queue. The next node in the queue becomes the new front node. Decrements
     * the queue size.
     *
     * @return The value at the front of the queue.
     */
    public T remove() {
	// your code here
    }

    /**
     * Splits the contents of the current Queue into the left and right Queues.
     * Moves nodes only - does not move value or call the high-level methods
     * insert or remove. this Queue is empty when done. Nodes are moved
     * alternately from this Queue to left and right.
     *
     * @param target1
     *            The first Queue to move nodes to.
     * @param target2
     *            The second Queue to move nodes to.
     */
    public void split(final DoubleQueue<T> target1,
	    final DoubleQueue<T> target2) {
	// your code here
    }
}
